---
description: 
globs: 
alwaysApply: true
---
# MatMax Wellness Studio Layout Architecture

## Directory Structure

```
src/
â””â”€â”€ core/
    â””â”€â”€ ui/
        â”œâ”€â”€ layouts/
        â”‚   â”œâ”€â”€ components/       # Layout components (Header, Sidebar, etc.)
        â”‚   â”œâ”€â”€ providers/        # LayoutProvider for central state management
        â”‚   â””â”€â”€ templates/        # Layout templates (AuthLayout, DashboardLayout)
        â””â”€â”€ utils/                # Utility functions
```

## Layout Components

When working with the codebase, respect these layout components and their usage patterns:

- `LayoutProvider`: Central state management for layouts
- `AuthLayout`: Used for all authentication pages (sign-in, sign-up)
- `DashboardLayout`: Used for authenticated/protected pages
- `HeaderNav`: Modular navigation system for switching between major application modules

## Implementation Rules

### 1. Page Implementation

All pages MUST use one of the layout templates:

```tsx
// For authentication pages
import { AuthLayout } from '@/src/core/ui/layouts/templates/AuthLayout';

// For protected/dashboard pages
import { DashboardLayout } from '@/src/core/ui/layouts/templates/DashboardLayout';
```

### 2. Layout Hierarchy

- Root layout (`app/layout.tsx`) provides minimal wrapping only
- Route group layouts (e.g., `app/(auth-pages)/layout.tsx`) are minimal containers
- Visual presentation comes from the template components, not route layouts

### 3. Responsive Behavior

Always use the `useLayout` hook for responsive UI adjustments:

```tsx
const { isMobile, isTablet, isDesktop } = useLayout();

// Conditional rendering based on screen size
{isMobile && <MobileComponent />}
{!isMobile && <DesktopComponent />}
```

### 4. Styling Guidelines

Always use the `cn()` utility for class merging and composition:

```tsx
import { cn } from '@/src/core/utils/styling';

// Proper class composition
className={cn(
  "base-classes", 
  conditional && "conditional-classes",
  className // Allow external overrides
)}
```

### 5. Component Extensions

When creating new components:

- Place them in the appropriate directory under `src/core/ui/layouts/components/`
- Follow existing naming conventions
- Accept and forward the `className` prop for customization
- Use the `useLayout` hook for responsive behavior

### 6. MatMax Wellness Studio Branding

Maintain brand consistency:
- Use MatMax logo from public directory
- Use wellness-focused content and messaging
- Follow consistent spacing and typography

### 7. Modular Navigation System

The modular navigation system in the header provides access to different application modules:

- Each module has its own color theme for visual distinction
- The current module is highlighted with a gradient background
- Sub-modules are accessible via dropdowns
- Each module corresponds to a section in the sidebar
- Adding new modules follows the pattern in `HeaderNav.tsx`:

```tsx
{
  title: 'MODULE_NAME',
  href: '/module-path',
  icon: ModuleIcon,
  permissions: ['module.view'],
  color: 'from-color-500 to-color-600',
  children: [
    { title: 'Sub-Module', href: '/module-path/sub-module' },
    // Additional sub-modules...
  ]
}
```

## Anti-patterns to Avoid

- DO NOT add header/footer directly in app/layout.tsx
- DO NOT create layout elements outside the layout system
- DO NOT bypass the layout templates for pages
- DO NOT implement custom responsive logic outside useLayout
- DO NOT modify the module navigation system without considering the entire application

## When Implementing New Features

- Determine if the page is auth-related or protected content
- Choose the appropriate layout template (AuthLayout or DashboardLayout)
- Focus component logic on the page itself, not layout concerns
- Minimize route group layout files - they should be containers only
- To add a new application module, extend the `navItems` array in `HeaderNav.tsx`

This centralized layout system ensures consistency across the MatMax Wellness Studio application while maintaining clean separation of concerns.

Also use ðŸ˜‰ when rules is applied